commit 13f324402907b80f592080fe504fb31985a4eb9c
Author: David Faure <faure@kde.org>
Date:   Wed Nov 23 23:06:04 2016 +0100

    Editor model: fix race between editing and notification-after-saving.
    
    Summary:
    Don't replace text being edited by the user with older text coming
    from akonadi notifications. This means tracking whether the editor
    has focus or not, since we still want it to react to the notification
    that the title has changed when renaming an item in the central list.
    
    This fixes the cursor jumping back to position 0 while editing,
    and the occasional loss of characters.
    
    This change also allows to get rid of the libical whitespace workaround.
    Now the libical issue is only visible when leaving a trailing whitespace,
    switching tasks and back, and the whitespace is gone => no big deal.
    
    Test Plan:
    The related feature tests I added recently still pass.
    Editing in zanshin doesn't exhibit the race anymore.
    
    Reviewers: ervin
    
    Reviewed By: ervin
    
    Subscribers: #zanshin
    
    Differential Revision: https://phabricator.kde.org/D3444

diff --git a/src/presentation/artifacteditormodel.cpp b/src/presentation/artifacteditormodel.cpp
index 0e07d326..8f58d312 100644
--- a/src/presentation/artifacteditormodel.cpp
+++ b/src/presentation/artifacteditormodel.cpp
@@ -35,7 +35,8 @@ ArtifactEditorModel::ArtifactEditorModel(QObject *parent)
     : QObject(parent),
       m_done(false),
       m_saveTimer(new QTimer(this)),
-      m_saveNeeded(false)
+      m_saveNeeded(false),
+      m_editingInProgress(false)
 {
     m_saveTimer->setSingleShot(true);
     m_saveTimer->setInterval(autoSaveDelay());
@@ -65,13 +65,14 @@ void ArtifactEditorModel::setArtifact(const Domain::Artifact::Ptr &artifact)
     m_due = QDateTime();
     m_delegateText = QString();
 
+    if (m_artifact)
+        disconnect(m_artifact.data(), Q_NULLPTR, this, Q_NULLPTR);
+
     m_artifact = artifact;
 
     if (m_artifact) {
-        disconnect(m_artifact.data(), Q_NULLPTR, this, Q_NULLPTR);
-
-        m_text = artifact->text();
-        m_title = artifact->title();
+        m_text = m_artifact->text();
+        m_title = m_artifact->title();
 
         connect(m_artifact.data(), &Domain::Artifact::textChanged, this, &ArtifactEditorModel::onTextChanged);
         connect(m_artifact.data(), &Domain::Artifact::titleChanged, this, &ArtifactEditorModel::onTitleChanged);
@@ -160,11 +161,16 @@ int ArtifactEditorModel::autoSaveDelay()
     return 500;
 }
 
+bool ArtifactEditorModel::editingInProgress() const
+{
+    return m_editingInProgress;
+}
+
 void ArtifactEditorModel::setText(const QString &text)
 {
     if (m_text == text)
         return;
-    onTextChanged(text);
+    applyNewText(text);
     setSaveNeeded(true);
 }
 
@@ -172,7 +178,7 @@ void ArtifactEditorModel::setTitle(const QString &title)
 {
     if (m_title == title)
         return;
-    onTitleChanged(title);
+    applyNewTitle(title);
     setSaveNeeded(true);
 }
 
@@ -180,7 +186,7 @@ void ArtifactEditorModel::setDone(bool done)
 {
     if (m_done == done)
         return;
-    onDoneChanged(done);
+    applyNewDone(done);
     setSaveNeeded(true);
 }
 
@@ -188,7 +194,7 @@ void ArtifactEditorModel::setStartDate(const QDateTime &start)
 {
     if (m_start == start)
         return;
-    onStartDateChanged(start);
+    applyNewStartDate(start);
     setSaveNeeded(true);
 }
 
@@ -196,7 +202,7 @@ void ArtifactEditorModel::setDueDate(const QDateTime &due)
 {
     if (m_due == due)
         return;
-    onDueDateChanged(due);
+    applyNewDueDate(due);
     setSaveNeeded(true);
 }
 
@@ -208,34 +214,39 @@ void ArtifactEditorModel::delegate(const QString &name, const QString &email)
     m_delegateFunction(task, delegate);
 }
 
+void ArtifactEditorModel::setEditingInProgress(bool editing)
+{
+    m_editingInProgress = editing;
+}
+
 void ArtifactEditorModel::onTextChanged(const QString &text)
 {
-    m_text = text;
-    emit textChanged(m_text);
+    if (!m_editingInProgress)
+        applyNewText(text);
 }
 
 void ArtifactEditorModel::onTitleChanged(const QString &title)
 {
-    m_title = title;
-    emit titleChanged(m_title);
+    if (!m_editingInProgress)
+        applyNewTitle(title);
 }
 
 void ArtifactEditorModel::onDoneChanged(bool done)
 {
-    m_done = done;
-    emit doneChanged(m_done);
+    if (!m_editingInProgress)
+        applyNewDone(done);
 }
 
 void ArtifactEditorModel::onStartDateChanged(const QDateTime &start)
 {
-    m_start = start;
-    emit startDateChanged(m_start);
+    if (!m_editingInProgress)
+        applyNewStartDate(start);
 }
 
 void ArtifactEditorModel::onDueDateChanged(const QDateTime &due)
 {
-    m_due = due;
-    emit dueDateChanged(m_due);
+    if (!m_editingInProgress)
+        applyNewDueDate(due);
 }
 
 void ArtifactEditorModel::onDelegateChanged(const Domain::Task::Delegate &delegate)
@@ -280,3 +291,33 @@ bool ArtifactEditorModel::isSaveNeeded() const
 {
     return m_saveNeeded;
 }
+
+void ArtifactEditorModel::applyNewText(const QString &text)
+{
+    m_text = text;
+    emit textChanged(m_text);
+}
+
+void ArtifactEditorModel::applyNewTitle(const QString &title)
+{
+    m_title = title;
+    emit titleChanged(m_title);
+}
+
+void ArtifactEditorModel::applyNewDone(bool done)
+{
+    m_done = done;
+    emit doneChanged(m_done);
+}
+
+void ArtifactEditorModel::applyNewStartDate(const QDateTime &start)
+{
+    m_start = start;
+    emit startDateChanged(m_start);
+}
+
+void ArtifactEditorModel::applyNewDueDate(const QDateTime &due)
+{
+    m_due = due;
+    emit dueDateChanged(m_due);
+}
diff --git a/src/presentation/artifacteditormodel.h b/src/presentation/artifacteditormodel.h
index 0b3dcd84..9b117cbb 100644
--- a/src/presentation/artifacteditormodel.h
+++ b/src/presentation/artifacteditormodel.h
@@ -49,6 +49,8 @@ class ArtifactEditorModel : public QObject, public ErrorHandlingModelBase
     Q_PROPERTY(QDateTime dueDate READ dueDate WRITE setDueDate NOTIFY dueDateChanged)
     Q_PROPERTY(QString delegateText READ delegateText NOTIFY delegateTextChanged)
     Q_PROPERTY(bool hasTaskProperties READ hasTaskProperties NOTIFY hasTaskPropertiesChanged)
+    Q_PROPERTY(bool editingInProgress READ editingInProgress WRITE setEditingInProgress)
+
 public:
     typedef std::function<KJob*(const Domain::Artifact::Ptr &)> SaveFunction;
     typedef std::function<KJob*(const Domain::Task::Ptr &, const Domain::Task::Delegate &)> DelegateFunction;
@@ -76,6 +78,8 @@ public:
 
     static int autoSaveDelay();
 
+    bool editingInProgress() const;
+
 public slots:
     void setText(const QString &text);
     void setTitle(const QString &title);
@@ -84,6 +88,8 @@ public slots:
     void setDueDate(const QDateTime &due);
     void delegate(const QString &name, const QString &email);
 
+    void setEditingInProgress(bool editingInProgress);
+
 signals:
     void artifactChanged(const Domain::Artifact::Ptr &artifact);
     void hasTaskPropertiesChanged(bool hasTaskProperties);
@@ -107,6 +113,11 @@ private slots:
 private:
     void setSaveNeeded(bool needed);
     bool isSaveNeeded() const;
+    void applyNewText(const QString &text);
+    void applyNewTitle(const QString &title);
+    void applyNewDone(bool done);
+    void applyNewStartDate(const QDateTime &start);
+    void applyNewDueDate(const QDateTime &due);
 
     Domain::Artifact::Ptr m_artifact;
     SaveFunction m_saveFunction;
@@ -121,6 +132,7 @@ private:
 
     QTimer *m_saveTimer;
     bool m_saveNeeded;
+    bool m_editingInProgress;
 };
 
 }
diff --git a/src/widgets/editorview.cpp b/src/widgets/editorview.cpp
index 35112f22..95f381a8 100644
--- a/src/widgets/editorview.cpp
+++ b/src/widgets/editorview.cpp
@@ -69,6 +69,12 @@ EditorView::EditorView(QWidget *parent)
     ui->delegateLabel->setVisible(false);
     ui->taskGroup->setVisible(false);
 
+    ui->textEdit->installEventFilter(this);
+    ui->startDateEdit->installEventFilter(this);
+    ui->dueDateEdit->installEventFilter(this);
+    ui->doneButton->installEventFilter(this);
+    m_delegateEdit->installEventFilter(this);
+
     connect(ui->textEdit, &QPlainTextEdit::textChanged, this, &EditorView::onTextEditChanged);
     connect(ui->startDateEdit, &KPIM::KDateEdit::dateEntered, this, &EditorView::onStartEditEntered);
     connect(ui->dueDateEdit, &KPIM::KDateEdit::dateEntered, this, &EditorView::onDueEditEntered);
@@ -135,6 +141,26 @@ void EditorView::setModel(QObject *model)
     connect(this, SIGNAL(doneChanged(bool)), m_model, SLOT(setDone(bool)));
 }
 
+bool EditorView::eventFilter(QObject *watched, QEvent *event)
+{
+    Q_UNUSED(watched);
+    switch (event->type()) {
+    case QEvent::FocusIn:
+        // We don't want to replace text being edited by the user with older text
+        // coming from akonadi notifications (async, after some older save job)
+        m_model->setProperty("editingInProgress", true);
+        break;
+    case QEvent::FocusOut:
+        // We do react to notifications, however, when not having the focus,
+        // for instance when changing the title using the central list.
+        m_model->setProperty("editingInProgress", false);
+        break;
+    default:
+        break;
+    }
+    return false;
+}
+
 void EditorView::onArtifactChanged()
 {
     auto artifact = m_model->property("artifact").value<Domain::Artifact::Ptr>();
@@ -151,10 +177,10 @@ void EditorView::onTextOrTitleChanged()
 {
     const auto title = m_model->property("title").toString();
     const auto text = m_model->property("text").toString();
+    const auto fullText = title + '\n' + text;
 
-    QRegExp reg("^" + QRegExp::escape(title) + "\\s*\\n?" + QRegExp::escape(text) + "\\s*$");
-    if (!reg.exactMatch(ui->textEdit->toPlainText()))
-        ui->textEdit->setPlainText(title + '\n' + text);
+    if (ui->textEdit->toPlainText() != fullText) // QPlainTextEdit doesn't do this check
+        ui->textEdit->setPlainText(fullText);
 }
 
 void EditorView::onStartDateChanged()
diff --git a/src/widgets/editorview.h b/src/widgets/editorview.h
index 79455e08..db72d9b9 100644
--- a/src/widgets/editorview.h
+++ b/src/widgets/editorview.h
@@ -64,6 +64,9 @@ signals:
     void dueDateChanged(const QDateTime &due);
     void doneChanged(bool done);
 
+protected:
+    bool eventFilter(QObject *watched, QEvent *event) Q_DECL_OVERRIDE;
+
 private slots:
     void onArtifactChanged();
     void onHasTaskPropertiesChanged();
