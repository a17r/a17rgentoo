From 8434965bed146a1ff543787336cf8d98092b42e6 Mon Sep 17 00:00:00 2001
From: David Tardon <dtardon@redhat.com>
Date: Sat, 30 Mar 2019 16:35:43 +0100
Subject: [PATCH] gdrive-session: do not allow copying

---
 qa/libcmis/test-gdrive.cxx     | 167 +++++++++++++++++----------------
 src/libcmis/gdrive-session.cxx |   5 -
 src/libcmis/gdrive-session.hxx |   4 +-
 3 files changed, 87 insertions(+), 89 deletions(-)

diff --git a/qa/libcmis/test-gdrive.cxx b/qa/libcmis/test-gdrive.cxx
index ef9afd8..b04e230 100644
--- a/qa/libcmis/test-gdrive.cxx
+++ b/qa/libcmis/test-gdrive.cxx
@@ -30,6 +30,7 @@
 #include <cppunit/TestFixture.h>
 #include <cppunit/TestAssert.h>
 
+#include <memory>
 #include <string>
 
 #if defined __clang__
@@ -82,6 +83,8 @@ namespace
     }
 }
 
+typedef std::unique_ptr<GDriveSession> GDriveSessionPtr;
+
 class GDriveTest : public CppUnit::TestFixture
 {
     public:
@@ -160,10 +163,10 @@ class GDriveTest : public CppUnit::TestFixture
         CPPUNIT_TEST_SUITE_END( );
 
     private:
-        GDriveSession getTestSession( string username, string password, bool with2FA = false );
+        GDriveSessionPtr getTestSession( string username, string password, bool with2FA = false );
 };
 
-GDriveSession GDriveTest::getTestSession( string username, string password, bool with2FA )
+GDriveSessionPtr GDriveTest::getTestSession( string username, string password, bool with2FA )
 {
     libcmis::OAuth2DataPtr oauth2(
         new libcmis::OAuth2Data( AUTH_URL, TOKEN_URL, SCOPE,
@@ -207,12 +210,12 @@ GDriveSession GDriveTest::getTestSession( string username, string password, bool
     curl_mockup_addResponse ( TOKEN_URL.c_str( ), empty.c_str( ), "POST",
                               DATA_DIR "/gdrive/token-response.json", 200, true );
 
-    return GDriveSession( BASE_URL, username, password, oauth2, false );
+    return GDriveSessionPtr( new GDriveSession( BASE_URL, username, password, oauth2, false ) );
 }
 
 void GDriveTest::sessionAuthenticationTest( )
 {
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     string empty;
 
     // Check authentication request for email
@@ -259,18 +262,18 @@ void GDriveTest::sessionAuthenticationTest( )
     CPPUNIT_ASSERT_EQUAL_MESSAGE(
         "Wrong access token",
          string ( "mock-access-token" ),
-         session.m_oauth2Handler->getAccessToken( ));
+         session->m_oauth2Handler->getAccessToken( ));
     CPPUNIT_ASSERT_EQUAL_MESSAGE(
         "Wrong refresh token",
         string ("mock-refresh-token"),
-        session.m_oauth2Handler->getRefreshToken( ));
+        session->m_oauth2Handler->getRefreshToken( ));
 }
 
 void GDriveTest::sessionAuthenticationTestWith2FA( )
 {
     libcmis::SessionFactory::setOAuth2AuthCodeProvider( lcl_authCodeFallback );
 
-    GDriveSession session = getTestSession( USERNAME2, PASSWORD2, true );
+    GDriveSessionPtr session = getTestSession( USERNAME2, PASSWORD2, true );
     string empty;
 
     // Check authentication request for email
@@ -327,11 +330,11 @@ void GDriveTest::sessionAuthenticationTestWith2FA( )
     CPPUNIT_ASSERT_EQUAL_MESSAGE(
         "Wrong access token",
          string ( "mock-access-token" ),
-         session.m_oauth2Handler->getAccessToken( ));
+         session->m_oauth2Handler->getAccessToken( ));
     CPPUNIT_ASSERT_EQUAL_MESSAGE(
         "Wrong refresh token",
         string ("mock-refresh-token"),
-        session.m_oauth2Handler->getRefreshToken( ));
+        session->m_oauth2Handler->getRefreshToken( ));
 }
 
 void GDriveTest::sessionExpiryTokenGetTest( )
@@ -340,7 +343,7 @@ void GDriveTest::sessionExpiryTokenGetTest( )
     // We need to use the refresh key to get a new one.
 
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
 
     curl_mockup_reset( );
     static const string objectId("aFileId");
@@ -354,17 +357,17 @@ void GDriveTest::sessionExpiryTokenGetTest( )
     try
     {
         // GET expires, need to refresh then GET again
-        libcmis::ObjectPtr obj = session.getObject( objectId );
+        libcmis::ObjectPtr obj = session->getObject( objectId );
     }
     catch ( ... )
     {
-        if ( session.getHttpStatus( ) == 401 )
+        if ( session->getHttpStatus( ) == 401 )
         {
             // Check if access token is refreshed
             CPPUNIT_ASSERT_EQUAL_MESSAGE(
                    "wrong access token",
                    string ( "new-access-token" ),
-                   session.m_oauth2Handler->getAccessToken( ) );
+                   session->m_oauth2Handler->getAccessToken( ) );
         }
     }
 }
@@ -375,7 +378,7 @@ void GDriveTest::sessionExpiryTokenPostTest( )
     // We need to use the refresh key to get a new one.
 
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
 
     curl_mockup_reset( );
     static const string folderId("aFileId");
@@ -392,7 +395,7 @@ void GDriveTest::sessionExpiryTokenPostTest( )
     // refresh and then POST again
     curl_mockup_addResponse( metaUrl.c_str( ), "",
                                "POST", "", 401, false );
-    libcmis::FolderPtr parent = session.getFolder( folderId );
+    libcmis::FolderPtr parent = session->getFolder( folderId );
 
     try
     {
@@ -402,13 +405,13 @@ void GDriveTest::sessionExpiryTokenPostTest( )
     }
     catch ( ... )
     {
-        if ( session.getHttpStatus( ) == 401 )
+        if ( session->getHttpStatus( ) == 401 )
         {
             // Check if access token is refreshed
             CPPUNIT_ASSERT_EQUAL_MESSAGE(
                    "wrong access token",
                    string ( "new-access-token" ),
-                   session.m_oauth2Handler->getAccessToken( ) );
+                   session->m_oauth2Handler->getAccessToken( ) );
         }
     }
 }
@@ -419,7 +422,7 @@ void GDriveTest::sessionExpiryTokenDeleteTest( )
     // We need to use the refresh key to get a new one.
 
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
 
     curl_mockup_reset( );
     static const string objectId("aFileId");
@@ -433,9 +436,9 @@ void GDriveTest::sessionExpiryTokenDeleteTest( )
     // 401 response, token is expired
     curl_mockup_addResponse( url.c_str( ),"", "DELETE", "", 401, false);
 
-    libcmis::ObjectPtr obj = session.getObject( objectId );
+    libcmis::ObjectPtr obj = session->getObject( objectId );
 
-    libcmis::ObjectPtr object = session.getObject( objectId );
+    libcmis::ObjectPtr object = session->getObject( objectId );
 
     try
     {
@@ -444,13 +447,13 @@ void GDriveTest::sessionExpiryTokenDeleteTest( )
     }
     catch ( ... )
     {
-        if ( session.getHttpStatus( ) == 401 )
+        if ( session->getHttpStatus( ) == 401 )
         {
             // Check if access token is refreshed
             CPPUNIT_ASSERT_EQUAL_MESSAGE(
                    "wrong access token",
                    string ( "new-access-token" ),
-                   session.m_oauth2Handler->getAccessToken( ) );
+                   session->m_oauth2Handler->getAccessToken( ) );
             const struct HttpRequest* deleteRequest = curl_mockup_getRequest( url.c_str( ), "", "DELETE" );
             CPPUNIT_ASSERT_MESSAGE( "Delete request not sent", deleteRequest );
             curl_mockup_HttpRequest_free( deleteRequest );
@@ -465,7 +468,7 @@ void GDriveTest::sessionExpiryTokenPutTest( )
     // We need to use the refresh key to get a new one.
 
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
 
     curl_mockup_reset( );
     static const string objectId("aFileId");
@@ -480,7 +483,7 @@ void GDriveTest::sessionExpiryTokenPutTest( )
     // 401 response, token is expired
     curl_mockup_addResponse( url.c_str( ),"", "PUT", "", 401, false );
 
-    libcmis::ObjectPtr object = session.getObject( objectId );
+    libcmis::ObjectPtr object = session->getObject( objectId );
 
     try
     {
@@ -489,13 +492,13 @@ void GDriveTest::sessionExpiryTokenPutTest( )
     }
     catch ( ... )
     {
-        if ( session.getHttpStatus( ) == 401 )
+        if ( session->getHttpStatus( ) == 401 )
         {
             // Check if access token is refreshed
             CPPUNIT_ASSERT_EQUAL_MESSAGE(
                    "wrong access token",
                    string ( "new-access-token" ),
-                   session.m_oauth2Handler->getAccessToken( ) );
+                   session->m_oauth2Handler->getAccessToken( ) );
         }
     }
 }
@@ -511,12 +514,12 @@ void GDriveTest::getDocumentTest( )
     curl_mockup_reset( );
     static const string objectId ("aFileId");
 
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     string url = BASE_URL + "/files/" + objectId;
     curl_mockup_addResponse( url.c_str( ), "",
                              "GET", DATA_DIR "/gdrive/document.json", 200, true);
 
-    libcmis::ObjectPtr obj = session.getObject( objectId );
+    libcmis::ObjectPtr obj = session->getObject( objectId );
 
     // Check if we got the document object.
     libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( obj );
@@ -546,7 +549,7 @@ void GDriveTest::getFolderTest( )
 {
     curl_mockup_reset( );
 
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     static const string folderId( "aFolderId" );
     static const string parentId( "parentID" );
     string url = BASE_URL + "/files/" + folderId;
@@ -557,7 +560,7 @@ void GDriveTest::getFolderTest( )
     curl_mockup_addResponse( parentUrl.c_str( ), "",
                              "GET", DATA_DIR "/gdrive/folder.json", 200, true);
     // Check if we got the Folder object.
-    libcmis::FolderPtr folder = session.getFolder( folderId );
+    libcmis::FolderPtr folder = session->getFolder( folderId );
     CPPUNIT_ASSERT_MESSAGE( "Fetched object should be an instance of libcmis::FolderPtr",
             NULL != folder );
 
@@ -578,7 +581,7 @@ void GDriveTest::getFolderTest( )
 void GDriveTest::getDocumentParentsTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
 
     static const string documentId( "aFileId" );
     static const string parentId( "aFolderId" );
@@ -594,7 +597,7 @@ void GDriveTest::getDocumentParentsTest( )
     curl_mockup_addResponse( parent2Url.c_str( ), "",
                              "GET", DATA_DIR "/gdrive/folder2.json", 200, true);
 
-    libcmis::ObjectPtr object = session.getObject( "aFileId" );
+    libcmis::ObjectPtr object = session->getObject( "aFileId" );
     libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );
 
     CPPUNIT_ASSERT_MESSAGE( "Document expected", document != NULL );
@@ -610,7 +613,7 @@ void GDriveTest::getDocumentParentsTest( )
 void GDriveTest::getContentStreamTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
 
     static const string documentId( "aFileId" );
     string url = BASE_URL + "/files/" + documentId;
@@ -620,7 +623,7 @@ void GDriveTest::getContentStreamTest( )
     string downloadUrl = "https://downloadLink";
     curl_mockup_addResponse( downloadUrl.c_str( ), "", "GET", expectedContent.c_str( ), 0, false );
 
-    libcmis::ObjectPtr object = session.getObject( documentId );
+    libcmis::ObjectPtr object = session->getObject( documentId );
     libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );
 
     try
@@ -642,7 +645,7 @@ void GDriveTest::getContentStreamTest( )
 void GDriveTest::setContentStreamTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
 
     const string documentId( "aFileId" );
     const string uploadBaseUrl = "https://www.googleapis.com/upload/drive/v2/files/";
@@ -652,7 +655,7 @@ void GDriveTest::setContentStreamTest( )
     curl_mockup_addResponse( url.c_str( ), "",
                                "GET", DATA_DIR "/gdrive/document2.json", 200, true);
 
-    libcmis::ObjectPtr object = session.getObject( documentId );
+    libcmis::ObjectPtr object = session->getObject( documentId );
     libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );
 
     curl_mockup_addResponse( url.c_str( ), "",
@@ -687,7 +690,7 @@ void GDriveTest::setContentStreamGdocTest( )
 {
 
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
 
     const string documentId( "aFileId" );
     const string uploadBaseUrl = "https://www.googleapis.com/upload/drive/v2/files/";
@@ -697,7 +700,7 @@ void GDriveTest::setContentStreamGdocTest( )
     curl_mockup_addResponse( url.c_str( ), "",
                                "GET", DATA_DIR "/gdrive/document.json", 200, true);
 
-    libcmis::ObjectPtr object = session.getObject( documentId );
+    libcmis::ObjectPtr object = session->getObject( documentId );
     libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );
 
     curl_mockup_addResponse( url.c_str( ), "convert=true",
@@ -728,7 +731,7 @@ void GDriveTest::getChildrenTest( )
 {
     curl_mockup_reset( );
 
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     static const string folderId ("aFolderId");
     string url = BASE_URL + "/files/" + folderId;
     curl_mockup_addResponse( url.c_str( ), "",
@@ -742,7 +745,7 @@ void GDriveTest::getChildrenTest( )
     curl_mockup_addResponse( urlChildDocument.c_str( ), "",
                              "GET", DATA_DIR "/gdrive/document.json", 200, true);
 
-    libcmis::ObjectPtr obj = session.getObject( folderId );
+    libcmis::ObjectPtr obj = session->getObject( folderId );
 
     // Check if we got the Folder object.
     libcmis::FolderPtr folder = boost::dynamic_pointer_cast< libcmis::Folder >( obj );
@@ -777,10 +780,10 @@ void GDriveTest::getTypeTest( )
 {
     curl_mockup_reset( );
 
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
 
     string expectedId( "cmis:document" );
-    libcmis::ObjectTypePtr actual = session.getType( expectedId );
+    libcmis::ObjectTypePtr actual = session->getType( expectedId );
 
     CPPUNIT_ASSERT_EQUAL_MESSAGE( "Wrong Id for fetched type", expectedId, actual->getId( ) );
 }
@@ -789,8 +792,8 @@ void GDriveTest::getRepositoriesTest( )
 {
      curl_mockup_reset( );
 
-     GDriveSession session = getTestSession( USERNAME, PASSWORD );
-     vector< libcmis::RepositoryPtr > actual = session.getRepositories( );
+     GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
+     vector< libcmis::RepositoryPtr > actual = session->getRepositories( );
 
      CPPUNIT_ASSERT_EQUAL_MESSAGE( "Wrong number of repositories", size_t( 1 ),
                                    actual.size( ) );
@@ -803,11 +806,11 @@ void GDriveTest::getObjectTest()
 {
     static const string objectId ("aFileId");
 
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     string url = BASE_URL + "/files/" + objectId;
     curl_mockup_addResponse ( url.c_str( ), "",
                               "GET", DATA_DIR "/gdrive/gdoc-file.json", 200, true);
-    libcmis::ObjectPtr object = session.getObject( objectId );
+    libcmis::ObjectPtr object = session->getObject( objectId );
     boost::shared_ptr<GDriveObject> obj = boost::dynamic_pointer_cast
                                             <GDriveObject>(object);
     CPPUNIT_ASSERT_EQUAL_MESSAGE( "Wrong Object Id", objectId,
@@ -816,12 +819,12 @@ void GDriveTest::getObjectTest()
 
 void GDriveTest::getObjectByPathRootTest()
 {
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     string rootUrl = BASE_URL + "/files/root";
     curl_mockup_addResponse ( rootUrl.c_str( ), "",
                               "GET", DATA_DIR "/gdrive/folder.json", 200, true);
 
-    libcmis::ObjectPtr object = session.getObjectByPath( "/" );
+    libcmis::ObjectPtr object = session->getObjectByPath( "/" );
     CPPUNIT_ASSERT_EQUAL_MESSAGE( "Wrong Object Id",
                                   string("testFolder"), object->getName( ) );
 }
@@ -829,7 +832,7 @@ void GDriveTest::getObjectByPathRootTest()
 void GDriveTest::getObjectByPathTest()
 {
     // Mockup setup
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     string rootChildUrl = BASE_URL + "/files/root/children/";
     curl_mockup_addResponse ( rootChildUrl.c_str( ), "q=title+=+'GDrive File'",
                               "GET", DATA_DIR "/gdrive/root_child_search.json", 200, true );
@@ -839,7 +842,7 @@ void GDriveTest::getObjectByPathTest()
                              "GET", DATA_DIR "/gdrive/document.json", 200, true );
 
     // Tested method
-    libcmis::ObjectPtr object = session.getObjectByPath( "/GDrive File" );
+    libcmis::ObjectPtr object = session->getObjectByPath( "/GDrive File" );
 
     // Check the result
     CPPUNIT_ASSERT_EQUAL_MESSAGE( "Wrong Object",
@@ -849,7 +852,7 @@ void GDriveTest::getObjectByPathTest()
 void GDriveTest::getObjectByPathMissingTest()
 {
     // Mockup setup
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     string rootChildUrl = BASE_URL + "/files/root/children/";
     curl_mockup_addResponse ( rootChildUrl.c_str( ), "q=title+=+'GDrive File'",
                               "GET", DATA_DIR "/gdrive/root_child_missing.json", 200, true );
@@ -857,7 +860,7 @@ void GDriveTest::getObjectByPathMissingTest()
     // Tested method
     try
     {
-        libcmis::ObjectPtr object = session.getObjectByPath( "/GDrive File" );
+        libcmis::ObjectPtr object = session->getObjectByPath( "/GDrive File" );
         CPPUNIT_FAIL( "objectNotFound exception expected" );
     }
     catch ( libcmis::Exception& e )
@@ -872,12 +875,12 @@ void GDriveTest::getDocumentAllowableActionsTest( )
     curl_mockup_reset( );
     static const string objectId ("aFileId");
 
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     string url = BASE_URL + "/files/" + objectId;
     curl_mockup_addResponse( url.c_str( ), "",
                              "GET", DATA_DIR "/gdrive/document.json", 200, true);
 
-    libcmis::ObjectPtr obj = session.getObject( objectId );
+    libcmis::ObjectPtr obj = session->getObject( objectId );
 
     libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( obj );
 
@@ -896,12 +899,12 @@ void GDriveTest::getFolderAllowableActionsTest( )
     curl_mockup_reset( );
     static const string folderId ("aFolderId");
 
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     string url = BASE_URL + "/files/" + folderId;
     curl_mockup_addResponse( url.c_str( ), "",
                              "GET", DATA_DIR "/gdrive/folder.json", 200, true);
 
-    libcmis::FolderPtr folder = session.getFolder( folderId );
+    libcmis::FolderPtr folder = session->getFolder( folderId );
 
     boost::shared_ptr< libcmis::AllowableActions > actions = folder->getAllowableActions( );
 
@@ -917,14 +920,14 @@ void GDriveTest::getFolderAllowableActionsTest( )
 void GDriveTest::checkOutTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
 
     static const string documentId( "aFileId" );
     string url = BASE_URL + "/files/" + documentId;
     curl_mockup_addResponse( url.c_str( ), "",
                                "GET", DATA_DIR "/gdrive/document.json", 200, true);
 
-    libcmis::ObjectPtr object = session.getObject( documentId );
+    libcmis::ObjectPtr object = session->getObject( documentId );
     libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );
     libcmis::DocumentPtr checkout = document->checkOut( );
     CPPUNIT_ASSERT_MESSAGE( "CheckOut failed", NULL != checkout );
@@ -933,7 +936,7 @@ void GDriveTest::checkOutTest( )
 void GDriveTest::checkInTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
 
     const string documentId( "aFileId" );
     const string uploadBaseUrl = "https://www.googleapis.com/upload/drive/v2/files/";
@@ -943,7 +946,7 @@ void GDriveTest::checkInTest( )
     curl_mockup_addResponse( url.c_str( ), "",
                                "GET", DATA_DIR "/gdrive/document2.json", 200, true);
 
-    libcmis::ObjectPtr object = session.getObject( documentId );
+    libcmis::ObjectPtr object = session->getObject( documentId );
     libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );
 
     curl_mockup_addResponse( url.c_str( ), "",
@@ -962,7 +965,7 @@ void GDriveTest::checkInTest( )
 void GDriveTest::deleteTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
 
     const string objectId( "aFileId" );
 
@@ -971,7 +974,7 @@ void GDriveTest::deleteTest( )
                                "GET", DATA_DIR "/gdrive/document2.json", 200, true);
     curl_mockup_addResponse( url.c_str( ),"", "DELETE", "", 204, false);
 
-    libcmis::ObjectPtr object = session.getObject( objectId );
+    libcmis::ObjectPtr object = session->getObject( objectId );
 
     object->remove( );
     const struct HttpRequest* deleteRequest = curl_mockup_getRequest( url.c_str( ), "", "DELETE" );
@@ -982,7 +985,7 @@ void GDriveTest::deleteTest( )
 void GDriveTest::moveTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     const string objectId( "aFileId" );
     const string sourceId( "aFolderId" );
     const string desId( "aNewFolderId" );
@@ -999,10 +1002,10 @@ void GDriveTest::moveTest( )
     curl_mockup_addResponse( desUrl.c_str( ), "",
                                "GET", DATA_DIR "/gdrive/folder2.json", 200, true );
 
-    libcmis::ObjectPtr object = session.getObject( objectId );
+    libcmis::ObjectPtr object = session->getObject( objectId );
 
-    libcmis::FolderPtr source = session.getFolder( sourceId );
-    libcmis::FolderPtr destination = session.getFolder( desId );
+    libcmis::FolderPtr source = session->getFolder( sourceId );
+    libcmis::FolderPtr destination = session->getFolder( desId );
 
     object->move( source, destination );
     const char* moveRequest = curl_mockup_getRequestBody( url.c_str( ), "", "PUT" );
@@ -1015,7 +1018,7 @@ void GDriveTest::moveTest( )
 void GDriveTest::createDocumentTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     const string documentId( "aFileId" );
     const string folderId( "aFolderId" );
 
@@ -1034,7 +1037,7 @@ void GDriveTest::createDocumentTest( )
     curl_mockup_addResponse( documentUrl.c_str( ), "",
                                "GET", DATA_DIR "/gdrive/document2.json", 200, true);
 
-    libcmis::FolderPtr parent = session.getFolder( folderId );
+    libcmis::FolderPtr parent = session->getFolder( folderId );
 
     try
     {
@@ -1067,7 +1070,7 @@ void GDriveTest::createDocumentTest( )
 void GDriveTest::createFolderTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     const string folderId( "aFolderId" );
 
     const string folderUrl = BASE_URL + "/files/" + folderId;
@@ -1077,7 +1080,7 @@ void GDriveTest::createFolderTest( )
                                "GET", DATA_DIR "/gdrive/folder.json", 200, true );
     curl_mockup_addResponse( metaUrl.c_str( ), "",
                                "POST", DATA_DIR "/gdrive/folder2.json", 200, true );
-    libcmis::FolderPtr parent = session.getFolder( folderId );
+    libcmis::FolderPtr parent = session->getFolder( folderId );
     try
     {
         PropertyPtrMap properties;
@@ -1106,7 +1109,7 @@ void GDriveTest::createFolderTest( )
 void GDriveTest::removeTreeTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     const string folderId( "aFolderId" );
 
     const string folderUrl = BASE_URL + "/files/" + folderId;
@@ -1116,7 +1119,7 @@ void GDriveTest::removeTreeTest( )
                                "GET", DATA_DIR "/gdrive/folder.json", 200, true );
     curl_mockup_addResponse( trashUrl.c_str( ), "",
                                "POST", "", 200, false );
-    libcmis::FolderPtr folder = session.getFolder( folderId );
+    libcmis::FolderPtr folder = session->getFolder( folderId );
 
     // just make sure it doesn't crash
     folder->removeTree( );
@@ -1125,13 +1128,13 @@ void GDriveTest::removeTreeTest( )
 void GDriveTest::getContentStreamWithRenditionsTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
 
     static const string documentId( "aFileId" );
     string url = BASE_URL + "/files/" + documentId;
     curl_mockup_addResponse( url.c_str( ), "",
                                "GET", DATA_DIR "/gdrive/document.json", 200, true);
-    libcmis::ObjectPtr object = session.getObject( documentId );
+    libcmis::ObjectPtr object = session->getObject( documentId );
     libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( object );
 
     // pdf stream
@@ -1197,7 +1200,7 @@ void GDriveTest::getContentStreamWithRenditionsTest( )
 void GDriveTest::updatePropertiesTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     const string documentId( "aFileId" );
     const string documentUrl = BASE_URL + "/files/" + documentId;
     curl_mockup_addResponse( documentUrl.c_str( ), "",
@@ -1209,7 +1212,7 @@ void GDriveTest::updatePropertiesTest( )
     // Values for the test
     string propertyName( "cmis:name" );
     string expectedValue( "New Title" );
-    libcmis::ObjectPtr object = session.getObject( documentId );
+    libcmis::ObjectPtr object = session->getObject( documentId );
 
     // Fill the map of properties to change
     PropertyPtrMap newProperties;
@@ -1264,16 +1267,16 @@ void GDriveTest::propertyCopyTest( )
 void GDriveTest::getRefreshTokenTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     CPPUNIT_ASSERT_EQUAL_MESSAGE( "Refresh token does not match",
                                   string ("mock-refresh-token"),
-                                  session.getRefreshToken( ) );
+                                  session->getRefreshToken( ) );
 }
 
 void GDriveTest::getThumbnailUrlTest( )
 {
     curl_mockup_reset( );
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     const string documentId( "aFileId" );
 
     const string documentUrl = BASE_URL + "/files/" + documentId;
@@ -1281,7 +1284,7 @@ void GDriveTest::getThumbnailUrlTest( )
     curl_mockup_addResponse( documentUrl.c_str( ), "",
                                "GET", DATA_DIR "/gdrive/document.json", 200, true );
 
-    libcmis::ObjectPtr document = session.getObject( documentId );
+    libcmis::ObjectPtr document = session->getObject( documentId );
     CPPUNIT_ASSERT_EQUAL_MESSAGE( "Thumbnail URL does not match",
                                    string ("https://aThumbnailLink"),
                                    document->getThumbnailUrl( ) );
@@ -1293,7 +1296,7 @@ void GDriveTest::getAllVersionsTest( )
     curl_mockup_reset( );
     static const string objectId ("aFileId");
 
-    GDriveSession session = getTestSession( USERNAME, PASSWORD );
+    GDriveSessionPtr session = getTestSession( USERNAME, PASSWORD );
     string url = BASE_URL + "/files/" + objectId;
     curl_mockup_addResponse( url.c_str( ), "",
                              "GET", DATA_DIR "/gdrive/document.json", 200, true);
@@ -1301,7 +1304,7 @@ void GDriveTest::getAllVersionsTest( )
     curl_mockup_addResponse( revisionUrl.c_str( ), "",
                              "GET", DATA_DIR "/gdrive/allVersions.json", 200, true);
 
-    libcmis::ObjectPtr obj = session.getObject( objectId );
+    libcmis::ObjectPtr obj = session->getObject( objectId );
 
     libcmis::DocumentPtr document = boost::dynamic_pointer_cast< libcmis::Document >( obj );
 
diff --git a/src/libcmis/gdrive-session.cxx b/src/libcmis/gdrive-session.cxx
index c31637a..87bb160 100644
--- a/src/libcmis/gdrive-session.cxx
+++ b/src/libcmis/gdrive-session.cxx
@@ -56,11 +56,6 @@ GDriveSession::GDriveSession ( string baseUrl,
     }
 }
 
-GDriveSession::GDriveSession( const GDriveSession& copy ) :
-    BaseSession( copy )
-{
-}
-
 GDriveSession::GDriveSession() :
     BaseSession()
 {
diff --git a/src/libcmis/gdrive-session.hxx b/src/libcmis/gdrive-session.hxx
index 6fd0777..f60ff6c 100644
--- a/src/libcmis/gdrive-session.hxx
+++ b/src/libcmis/gdrive-session.hxx
@@ -41,8 +41,6 @@ class GDriveSession : public BaseSession
                        libcmis::OAuth2DataPtr oauth2,
                        bool verbose = false );
 
-        GDriveSession( const GDriveSession& copy );
-
         ~GDriveSession ( );
 
         virtual libcmis::RepositoryPtr getRepository( );
@@ -59,6 +57,8 @@ class GDriveSession : public BaseSession
 
     private:
         GDriveSession( );
+        GDriveSession( const GDriveSession& copy ) = delete;
+        GDriveSession& operator=( const GDriveSession& copy ) = delete;
 };
 
 #endif /* _GDRIVE_SESSION_HXX_ */
