--- /CMakeLists.txt
+++ /CMakeLists.txt
@@ -74,7 +74,7 @@
 find_package(Gpgme REQUIRED)
 # configure macros
 if (GPGME_FOUND)
-  include (gpgme++/ConfigureChecks.cmake)
+  include (kde4_gpgme++/ConfigureChecks.cmake)
 endif()
 
 if (NOT KDEPIM_ONLY_KLEO)
@@ -139,8 +139,8 @@
 ############### Now, we add the KDEPIMLibs components ###############
 # These targets will always be built
 add_subdirectory(cmake)
-add_subdirectory(gpgme++)
-add_subdirectory(qgpgme)
+add_subdirectory(kde4_gpgme++)
+add_subdirectory(kde4_qgpgme)
 
 if (NOT KDEPIM_ONLY_KLEO)
   add_subdirectory(kabc)
--- /KdepimLibsConfig.cmake.in
+++ /KdepimLibsConfig.cmake.in
@@ -75,7 +75,6 @@
 _kdepimlibs_set_lib_vars(AKONADI_NOTES  akonadi-notes)
 _kdepimlibs_set_lib_vars(AKONADI_SOCIALUTILS  akonadi-socialutils)
 _kdepimlibs_set_lib_vars(AKONADI_XML    akonadi-xml)
-_kdepimlibs_set_lib_vars(GPGMEPP        gpgmepp)
 _kdepimlibs_set_lib_vars(KABC           kabc)
 _kdepimlibs_set_lib_vars(KALARMCAL      kalarmcal)
 if (NOT KDEPIMLIBS_NO_KCAL)
@@ -85,6 +84,8 @@
 endif()
 _kdepimlibs_set_lib_vars(KCALCORE       kcalcore)
 _kdepimlibs_set_lib_vars(KCALUTILS      kcalutils)
+_kdepimlibs_set_lib_vars(KDE4_GPGMEPP   kde4_gpgmepp)
+_kdepimlibs_set_lib_vars(KDE4_QGPGME    kde4_qgpgme)
 _kdepimlibs_set_lib_vars(KHOLIDAYS      kholidays)
 _kdepimlibs_set_lib_vars(KIMAP          kimap)
 _kdepimlibs_set_lib_vars(KLDAP          kldap)
@@ -101,5 +102,4 @@
 _kdepimlibs_set_lib_vars(KXMLRPCCLIENT  kxmlrpcclient)
 _kdepimlibs_set_lib_vars(MAILTRANSPORT  mailtransport)
 _kdepimlibs_set_lib_vars(MICROBLOG      microblog)
-_kdepimlibs_set_lib_vars(QGPGME         qgpgme)
 _kdepimlibs_set_lib_vars(SYNDICATION    syndication)
--- /Mainpage.dox
+++ /Mainpage.dox
@@ -73,7 +73,7 @@
  * - <a href="microblog/html/index.html"><b>microblog</b></a>.
  *   <i>A library for microblogging.</i>
  *
- * - <a href="qgpgme/html/index.html"><b>QGpgME</b></a>.
+ * - <a href="kde4_qgpgme/html/index.html"><b>QGpgME</b></a>.
  *   <i>A C++ wrapper for gpgme.</i>
  *
  * - <a href="syndication/html/index.html"><b>syndication</b></a>.
--- /cmake/modules/FindKDE4_QGpgme.cmake
+++ /cmake/modules/FindKDE4_QGpgme.cmake
@@ -1,9 +1,9 @@
-# - Try to find the QGpgME library
+# - Try to find the KDE4_QGpgME library
 # Once done this will define
 #
-# QGPGME_FOUND
-# QGPGME_LIBRARIES
-# QGPGME_INCLUDE_DIR
+# KDE4_QGPGME_FOUND
+# KDE4_QGPGME_LIBRARIES
+# KDE4_QGPGME_INCLUDE_DIR
 
 # What we do here is a bit simplictic, but it's no worse than what
 # people were using in kdepim up to now...
@@ -12,25 +12,25 @@
 
 if(GPGME_FOUND)
 
-   find_library(_QGPGME_EXTRA_LIBRARY gpgme++
+   find_library(_KDE4_QGPGME_EXTRA_LIBRARY kde4_gpgme++
                 HINTS ${GPGME_LIBRARY_DIR})
 
-   find_library(QGPGME_LIBRARY qgpgme
+   find_library(KDE4_QGPGME_LIBRARY kde4_qgpgme
                 HINTS ${GPGME_LIBRARY_DIR})
 
-   if (QGPGME_LIBRARY)
+   if (KDE4_QGPGME_LIBRARY)
       # get the libdirectory and then go one up
-      get_filename_component(_QGPGME_PREFIX "${QGPGME_LIBRARY}" PATH)
-      get_filename_component(_QGPGME_PREFIX "${_QGPGME_PREFIX}" PATH)
-      find_path(QGPGME_INCLUDE_DIR qgpgme/qgpgme_export.h 
-                HINTS "${_QGPGME_PREFIX}/include" )
+      get_filename_component(_KDE4_QGPGME_PREFIX "${KDE4_QGPGME_LIBRARY}" PATH)
+      get_filename_component(_KDE4_QGPGME_PREFIX "${_KDE4_QGPGME_PREFIX}" PATH)
+      find_path(KDE4_QGPGME_INCLUDE_DIR kde4_qgpgme/qgpgme_export.h
+                HINTS "${_KDE4_QGPGME_PREFIX}/include" )
    endif()
 
-   set(QGPGME_LIBRARIES ${QGPGME_LIBRARY} ${_QGPGME_EXTRA_LIBRARY} ${GPGME_VANILLA_LIBRARIES})
+   set(KDE4_QGPGME_LIBRARIES ${KDE4_QGPGME_LIBRARY} ${_KDE4_QGPGME_EXTRA_LIBRARY} ${GPGME_VANILLA_LIBRARIES})
 
 endif()
 
 include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(QGpgme  DEFAULT_MSG  QGPGME_LIBRARY QGPGME_INCLUDE_DIR _QGPGME_EXTRA_LIBRARY)
+find_package_handle_standard_args(KDE4_QGpgme  DEFAULT_MSG  KDE4_QGPGME_LIBRARY KDE4_QGPGME_INCLUDE_DIR _KDE4_QGPGME_EXTRA_LIBRARY)
 
-mark_as_advanced(QGPGME_LIBRARY _QGPGME_EXTRA_LIBRARY QGPGME_INCLUDE_DIR)
+mark_as_advanced(KDE4_QGPGME_LIBRARY _KDE4_QGPGME_EXTRA_LIBRARY KDE4_QGPGME_INCLUDE_DIR)
--- /kde4_gpgme++/CMakeLists.txt
+++ /kde4_gpgme++/CMakeLists.txt
@@ -1,5 +1,5 @@
-project( gpgmepp )
-#KDE4_NO_ENABLE_FINAL(gpgmepp)
+project( kde4_gpgmepp )
+#KDE4_NO_ENABLE_FINAL(kde4_gpgmepp)
 if (MINGW)
   set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -mms-bitfields")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mms-bitfields")
@@ -15,7 +15,7 @@
 ##     Unix: gpgme
 ## We're building corresponding gpgme++ flavours
 
-set(gpgme_LIB_SRCS 
+set(kde4_gpgme_LIB_SRCS 
         exception.cpp
         context.cpp key.cpp 
         trustitem.cpp 
@@ -43,36 +43,37 @@
         configuration.cpp
 )
 
-set( _gpgmepp_version 2.8.0 )
-set( _gpgmepp_soversion 2 )
+set( _kde4_gpgmepp_version 2.8.0 )
+set( _kde4_gpgmepp_soversion 2 )
 
 set( GPGMEPP_INCLUDE ${INCLUDE_INSTALL_DIR} ${GPGME_INCLUDES} ${Boost_INCLUDE_DIR} )
 
 if ( GPGME_VANILLA_FOUND )
-   add_library( gpgmepp ${LIBRARY_TYPE} ${gpgme_LIB_SRCS} context_vanilla.cpp )
-   generate_export_header(gpgmepp EXPORT_FILE_NAME gpgme++_export.h)
+   add_library( kde4_gpgmepp ${LIBRARY_TYPE} ${kde4_gpgme_LIB_SRCS} context_vanilla.cpp )
+   generate_export_header(kde4_gpgmepp BASE_NAME gpgmepp EXPORT_FILE_NAME gpgme++_export.h)
 
-   target_link_libraries( gpgmepp ${GPGME_VANILLA_LIBRARIES} )
-   set_target_properties( gpgmepp PROPERTIES
-                                  VERSION     ${_gpgmepp_version}
-                                  SOVERSION   ${_gpgmepp_soversion}
-                                  OUTPUT_NAME gpgme++
+   target_link_libraries( kde4_gpgmepp ${GPGME_VANILLA_LIBRARIES} )
+   set_target_properties( kde4_gpgmepp PROPERTIES
+                                       VERSION     ${_kde4_gpgmepp_version}
+                                       SOVERSION   ${_kde4_gpgmepp_soversion}
+                                       OUTPUT_NAME kde4_gpgme++
    )
-   get_target_property( GPGMEPP_VANILLA_LIBRARY gpgmepp LOCATION )
-   install(TARGETS gpgmepp EXPORT kdepimlibsLibraryTargets ${INSTALL_TARGETS_DEFAULT_ARGS} COMPONENT Devel)
+   get_target_property( GPGMEPP_VANILLA_LIBRARY kde4_gpgmepp LOCATION )
+   install(TARGETS kde4_gpgmepp EXPORT kdepimlibsLibraryTargets ${INSTALL_TARGETS_DEFAULT_ARGS} COMPONENT Devel)
 
 endif()
 
 if ( GPGME_GLIB_FOUND )
-   add_library( gpgmepp-glib ${LIBRARY_TYPE} ${gpgme_LIB_SRCS} context_glib.cpp )
-   target_link_libraries( gpgmepp-glib ${GPGME_GLIB_LIBRARIES} )
-   set_target_properties( gpgmepp-glib PROPERTIES
-                                       VERSION     ${_gpgmepp_version}
-                                       SOVERSION   ${_gpgmepp_soversion}
-                                       OUTPUT_NAME gpgme++-glib DEFINE_SYMBOL gpgmepp_EXPORTS
+   add_library( kde4_gpgmepp-glib ${LIBRARY_TYPE} ${kde4_gpgme_LIB_SRCS} context_glib.cpp )
+   target_link_libraries( kde4_gpgmepp-glib ${GPGME_GLIB_LIBRARIES} )
+   set_target_properties( kde4_gpgmepp-glib PROPERTIES
+                                            VERSION     ${_kde4_gpgmepp_version}
+                                            SOVERSION   ${_kde4_gpgmepp_soversion}
+                                            OUTPUT_NAME kde4_gpgme++-glib
+                                            DEFINE_SYMBOL kde4_gpgmepp_EXPORTS
    )
-   get_target_property( GPGMEPP_GLIB_LIBRARY gpgmepp LOCATION )
-   install(TARGETS gpgmepp-glib EXPORT kdepimlibsLibraryTargets ${INSTALL_TARGETS_DEFAULT_ARGS} )
+   get_target_property( GPGMEPP_GLIB_LIBRARY kde4_gpgmepp-glib LOCATION )
+   install(TARGETS kde4_gpgmepp-glib EXPORT kdepimlibsLibraryTargets ${INSTALL_TARGETS_DEFAULT_ARGS} )
 endif()
 
 # this writes way too much, but do we care?
@@ -102,7 +103,7 @@
         gpgagentgetinfoassuantransaction.h
         configuration.h
         ${CMAKE_CURRENT_BINARY_DIR}/gpgme++_export.h vfsmountresult.h
-        DESTINATION ${INCLUDE_INSTALL_DIR}/gpgme++ COMPONENT Devel
+        DESTINATION ${INCLUDE_INSTALL_DIR}/kde4_gpgme++ COMPONENT Devel
    )
 
    install(
@@ -110,6 +111,6 @@
      ${CMAKE_CURRENT_BINARY_DIR}/GpgmeppConfig.cmake
      ${CMAKE_CURRENT_BINARY_DIR}/GpgmeppLibraryDepends.cmake
      DESTINATION
-     ${LIB_INSTALL_DIR}/gpgmepp )
+     ${LIB_INSTALL_DIR}/kde4_gpgmepp )
 
 endif()
--- /kde4_gpgme++/interfaces/CMakeLists.txt
+++ /kde4_gpgme++/interfaces/CMakeLists.txt
@@ -4,5 +4,5 @@
   passphraseprovider.h
   progressprovider.h
   assuantransaction.h
-  DESTINATION ${INCLUDE_INSTALL_DIR}/gpgme++/interfaces COMPONENT Devel)
+  DESTINATION ${INCLUDE_INSTALL_DIR}/kde4_gpgme++/interfaces COMPONENT Devel)
 
--- /kde4_qgpgme/CMakeLists.txt
+++ /kde4_qgpgme/CMakeLists.txt
@@ -1,16 +1,16 @@
 
 set( _any_gpgme_found false )
 
-set( _qgpgme_version 1.0.1 )
-set( _qgpgme_soversion 1 )
+set( _kde4_qgpgme_version 1.0.1 )
+set( _kde4_qgpgme_soversion 1 )
 
 if ( WIN32 AND GPGME_VANILLA_FOUND )
 
    # on Windows, we require gpgme(-vanilla), which is thread-safe
 
    set( _any_gpgme_found true )
-   set( _qgpgme_libgpgme gpgmepp )
-   #set( _qgpgme_extra_src eventloopinteractor_win.cpp )
+   set( _kde4_qgpgme_libgpgme kde4_gpgmepp )
+   #set( _kde4_qgpgme_extra_src eventloopinteractor_win.cpp )
 
 endif()
 
@@ -19,9 +19,9 @@
    # on Unix, we require gpgme(-vanilla), which is thread-safe
 
    set( _any_gpgme_found true )
-   set( _qgpgme_libgpgme gpgmepp )
-   set( _qgpgme_extra_src eventloopinteractor.cpp eventloopinteractor_unix.cpp )
-   set( _qgpgme_extra_headers eventloopinteractor.h )
+   set( _kde4_qgpgme_libgpgme kde4_gpgmepp )
+   set( _kde4_qgpgme_extra_src eventloopinteractor.cpp eventloopinteractor_unix.cpp )
+   set( _kde4_qgpgme_extra_headers eventloopinteractor.h )
 
 endif()
 
@@ -33,27 +33,27 @@
 
    add_subdirectory( tests )
 
-   set( qgpgme_LIB_SRCS
+   set( kde4_qgpgme_LIB_SRCS
         dataprovider.cpp
-        ${_qgpgme_extra_src}
+        ${_kde4_qgpgme_extra_src}
    )
 
-   add_library( qgpgme ${LIBRARY_TYPE} ${qgpgme_LIB_SRCS} )
-   generate_export_header(qgpgme)
+   add_library( kde4_qgpgme ${LIBRARY_TYPE} ${kde4_qgpgme_LIB_SRCS} )
+   generate_export_header(kde4_qgpgme BASE_NAME qgpgme)
 
-   target_link_libraries( qgpgme ${QT_QTCORE_LIBRARY} ${_qgpgme_libgpgme} )
+   target_link_libraries( kde4_qgpgme ${QT_QTCORE_LIBRARY} ${_kde4_qgpgme_libgpgme} )
 
-   set_target_properties( qgpgme PROPERTIES
-     VERSION ${_qgpgme_version}
-     SOVERSION ${_qgpgme_soversion}
+   set_target_properties( kde4_qgpgme PROPERTIES
+     VERSION ${_kde4_qgpgme_version}
+     SOVERSION ${_kde4_qgpgme_soversion}
    )
 
-   install( TARGETS qgpgme EXPORT kdepimlibsLibraryTargets ${INSTALL_TARGETS_DEFAULT_ARGS})
+   install( TARGETS kde4_qgpgme EXPORT kdepimlibsLibraryTargets ${INSTALL_TARGETS_DEFAULT_ARGS})
 
    install( FILES
      ${CMAKE_CURRENT_BINARY_DIR}/qgpgme_export.h
-     ${_qgpgme_extra_headers}
+     ${_kde4_qgpgme_extra_headers}
      dataprovider.h 
-     DESTINATION ${INCLUDE_INSTALL_DIR}/qgpgme COMPONENT Devel )
+     DESTINATION ${INCLUDE_INSTALL_DIR}/kde4_qgpgme COMPONENT Devel )
 
 endif()
--- /kde4_qgpgme/Mainpage.dox
+++ /kde4_qgpgme/Mainpage.dox
@@ -1 +1 @@
-// DOXYGEN_REFERENCES = gpgme++
+// DOXYGEN_REFERENCES = kde4_gpgme++
--- /kde4_qgpgme/tests/CMakeLists.txt
+++ /kde4_qgpgme/tests/CMakeLists.txt
@@ -1,5 +1,5 @@
 if ( GPGME_VANILLA_FOUND )
-   set( _qgpgme_libgpgme gpgmepp )
+   set( _kde4_qgpgme_libgpgme kde4_gpgmepp )
 endif()
 
 set( EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR} )
@@ -10,7 +10,7 @@
 
 ########### next target ###############
 
-set( qgpgme_TESTS
+set( kde4_qgpgme_TESTS
   dataprovidertest
   installtest
   # PORT ME AWAY FROM EVENT LOOPS
@@ -20,17 +20,17 @@
   #gpgadduseridtest
   )
 
-foreach( _qgpgme_test ${qgpgme_TESTS} )
-  kde4_add_executable( "${_qgpgme_test}" TEST "${_qgpgme_test}.cpp" )
+foreach( _kde4_qgpgme_test ${kde4_qgpgme_TESTS} )
+  kde4_add_executable( "${_kde4_qgpgme_test}" TEST "${_kde4_qgpgme_test}.cpp" )
   if (WIN32) # what's up?
-    target_link_libraries( "${_qgpgme_test}" qgpgme ${_qgpgme_libgpgme} ${_gpgme_vanilla_library} ${_gpg_error_library} ${QT_QTCORE_LIBRARY} )
+    target_link_libraries( "${_kde4_qgpgme_test}" kde4_qgpgme ${_kde4_qgpgme_libgpgme} ${_gpgme_vanilla_library} ${_gpg_error_library} ${QT_QTCORE_LIBRARY} )
   else()
-    target_link_libraries( "${_qgpgme_test}" qgpgme ${_qgpgme_libgpgme} gpgme gpg-error ${QT_QTCORE_LIBRARY} )
+    target_link_libraries( "${_kde4_qgpgme_test}" kde4_qgpgme ${_kde4_qgpgme_libgpgme} gpgme gpg-error ${QT_QTCORE_LIBRARY} )
   endif()
-endforeach( _qgpgme_test )
+endforeach( _kde4_qgpgme_test )
 
 ########### next target ###############
 
 # PORT ME AWAY FROM EVENT LOOPS
 #kde4_add_executable(editinteractortest TEST editinteractortest.cpp)
-#target_link_libraries(editinteractortest  qgpgme ${QT_QTGUI_LIBRARY})
+#target_link_libraries(editinteractortest  kde4_qgpgme ${QT_QTGUI_LIBRARY})
