From 1c1655478be84941b8650d461a65edcacc278342 Mon Sep 17 00:00:00 2001
From: Andreas Sturmlechner <asturm@gentoo.org>
Date: Tue, 20 Apr 2021 17:01:05 +0200
Subject: [PATCH] Revert "[Backport] CVE-2021-21201: Use after free in
 permissions"

This reverts commit 53a608aff9c39b18cbcaf6cc9784420410fa587f.

Causes build failure.

Signed-off-by: Andreas Sturmlechner <asturm@gentoo.org>
---
 .../permissions/permission_manager.cc         | 16 ++++-----
 .../permissions/permission_manager.h          |  8 ++---
 .../permissions/permission_controller_impl.cc | 20 +++++------
 .../permissions/permission_controller_impl.h  | 13 ++-----
 .../permissions/permission_service_context.cc | 13 ++++---
 .../permissions/permission_service_context.h  |  7 ++--
 .../media/media_stream_manager.cc             | 16 ++++-----
 .../media/media_stream_manager.h              | 16 ++++-----
 .../public/browser/permission_controller.h    | 23 ++----------
 .../browser/permission_controller_delegate.h  | 36 +++++--------------
 .../browser/web_engine_permission_delegate.cc | 11 +++---
 .../browser/web_engine_permission_delegate.h  |  5 ++-
 .../browser/headless_permission_manager.cc    |  7 ++--
 .../lib/browser/headless_permission_manager.h |  5 ++-
 14 files changed, 67 insertions(+), 129 deletions(-)

diff --git a/chromium/components/permissions/permission_manager.cc b/chromium/components/permissions/permission_manager.cc
index 9146f6f2761..d5ed9f78abb 100644
--- a/src/3rdparty/chromium/components/permissions/permission_manager.cc
+++ b/src/3rdparty/chromium/components/permissions/permission_manager.cc
@@ -536,14 +536,14 @@ bool PermissionManager::IsPermissionOverridableByDevTools(
                                                             origin->GetURL());
 }
 
-PermissionManager::SubscriptionId PermissionManager::SubscribePermissionStatusChange(
+int PermissionManager::SubscribePermissionStatusChange(
     PermissionType permission,
     content::RenderFrameHost* render_frame_host,
     const GURL& requesting_origin,
     base::RepeatingCallback<void(PermissionStatus)> callback) {
   DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
   if (is_shutting_down_)
-    return SubscriptionId();
+    return 0;
 
   if (subscriptions_.IsEmpty())
     PermissionsClient::Get()
@@ -580,20 +580,16 @@ PermissionManager::SubscriptionId PermissionManager::SubscribePermissionStatusCh
   subscription->callback =
       base::BindRepeating(&SubscriptionCallbackWrapper, std::move(callback));
 
-  auto id = subscription_id_generator_.GenerateNextId();
-  subscriptions_.AddWithID(std::move(subscription), id);
-  return id;
+  return subscriptions_.Add(std::move(subscription));
 }
 
-void PermissionManager::UnsubscribePermissionStatusChange(
-    SubscriptionId subscription_id) {
+void PermissionManager::UnsubscribePermissionStatusChange(int subscription_id) {
   DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
   if (is_shutting_down_)
     return;
 
-  if (subscriptions_.Lookup(subscription_id)) {
-    subscriptions_.Remove(subscription_id);
-  }
+  // Whether |subscription_id| is known will be checked by the Remove() call.
+  subscriptions_.Remove(subscription_id);
 
   if (subscriptions_.IsEmpty()) {
     PermissionsClient::Get()
diff --git a/chromium/components/permissions/permission_manager.h b/chromium/components/permissions/permission_manager.h
index 03ca801a7ae..d11fb4b2c4a 100644
--- a/src/3rdparty/chromium/components/permissions/permission_manager.h
+++ b/src/3rdparty/chromium/components/permissions/permission_manager.h
@@ -114,13 +114,13 @@ class PermissionManager : public KeyedService,
   bool IsPermissionOverridableByDevTools(
       content::PermissionType permission,
       const base::Optional<url::Origin>& origin) override;
-  SubscriptionId SubscribePermissionStatusChange(
+  int SubscribePermissionStatusChange(
       content::PermissionType permission,
       content::RenderFrameHost* render_frame_host,
       const GURL& requesting_origin,
       base::RepeatingCallback<void(blink::mojom::PermissionStatus)> callback)
       override;
-  void UnsubscribePermissionStatusChange(SubscriptionId subscription_id) override;
+  void UnsubscribePermissionStatusChange(int subscription_id) override;
 
   // TODO(raymes): Rather than exposing this, use the denial reason from
   // GetPermissionStatus in callers to determine whether a permission is
@@ -153,8 +153,7 @@ class PermissionManager : public KeyedService,
   class PermissionResponseCallback;
 
   struct Subscription;
-  using SubscriptionsMap =
-      base::IDMap<std::unique_ptr<Subscription>, SubscriptionId>;
+  using SubscriptionsMap = base::IDMap<std::unique_ptr<Subscription>>;
 
   PermissionContextBase* GetPermissionContext(ContentSettingsType type);
 
@@ -187,7 +186,6 @@ class PermissionManager : public KeyedService,
   content::BrowserContext* browser_context_;
   PendingRequestsMap pending_requests_;
   SubscriptionsMap subscriptions_;
-  SubscriptionId::Generator subscription_id_generator_;
 
   PermissionContextMap permission_contexts_;
   using ContentSettingsTypeOverrides =
diff --git a/chromium/content/browser/permissions/permission_controller_impl.cc b/chromium/content/browser/permissions/permission_controller_impl.cc
index 3a6e38178c1..ddd6656e035 100644
--- a/src/3rdparty/chromium/content/browser/permissions/permission_controller_impl.cc
+++ b/src/3rdparty/chromium/content/browser/permissions/permission_controller_impl.cc
@@ -133,8 +133,7 @@ struct PermissionControllerImpl::Subscription {
   int render_frame_id = -1;
   int render_process_id = -1;
   base::RepeatingCallback<void(blink::mojom::PermissionStatus)> callback;
-  // This is default-initialized to an invalid ID.
-  PermissionControllerDelegate::SubscriptionId delegate_subscription_id;
+  int delegate_subscription_id;
 };
 
 PermissionControllerImpl::~PermissionControllerImpl() {
@@ -390,8 +389,7 @@ void PermissionControllerImpl::OnDelegatePermissionStatusChange(
     subscription->callback.Run(status);
 }
 
-PermissionControllerImpl::SubscriptionId
-PermissionControllerImpl::SubscribePermissionStatusChange(
+int PermissionControllerImpl::SubscribePermissionStatusChange(
     PermissionType permission,
     RenderFrameHost* render_frame_host,
     const GURL& requesting_origin,
@@ -425,22 +423,22 @@ PermissionControllerImpl::SubscribePermissionStatusChange(
             base::BindRepeating(
                 &PermissionControllerImpl::OnDelegatePermissionStatusChange,
                 base::Unretained(this), subscription.get()));
+  } else {
+    subscription->delegate_subscription_id = kNoPendingOperation;
   }
-
-  auto id = subscription_id_generator_.GenerateNextId();
-  subscriptions_.AddWithID(std::move(subscription), id);
-  return id;
+  return subscriptions_.Add(std::move(subscription));
 }
 
 void PermissionControllerImpl::UnsubscribePermissionStatusChange(
-    SubscriptionId subscription_id) {
+    int subscription_id) {
   Subscription* subscription = subscriptions_.Lookup(subscription_id);
   if (!subscription)
     return;
   PermissionControllerDelegate* delegate =
       browser_context_->GetPermissionControllerDelegate();
-  if (delegate) {
-     delegate->UnsubscribePermissionStatusChange(
+  if (delegate &&
+      subscription->delegate_subscription_id != kNoPendingOperation) {
+    delegate->UnsubscribePermissionStatusChange(
         subscription->delegate_subscription_id);
   }
   subscriptions_.Remove(subscription_id);
diff --git a/chromium/content/browser/permissions/permission_controller_impl.h b/chromium/content/browser/permissions/permission_controller_impl.h
index d85788867f7..7ebf3c48a0e 100644
--- a/src/3rdparty/chromium/content/browser/permissions/permission_controller_impl.h
+++ b/src/3rdparty/chromium/content/browser/permissions/permission_controller_impl.h
@@ -72,19 +72,18 @@ class CONTENT_EXPORT PermissionControllerImpl : public PermissionController {
                        const GURL& requesting_origin,
                        const GURL& embedding_origin);
 
-  SubscriptionId SubscribePermissionStatusChange(
+  int SubscribePermissionStatusChange(
       PermissionType permission,
       RenderFrameHost* render_frame_host,
       const GURL& requesting_origin,
       const base::RepeatingCallback<void(blink::mojom::PermissionStatus)>&
           callback);
 
-  void UnsubscribePermissionStatusChange(SubscriptionId subscription_id);
+  void UnsubscribePermissionStatusChange(int subscription_id);
 
  private:
   struct Subscription;
-  using SubscriptionsMap =
-      base::IDMap<std::unique_ptr<Subscription>, SubscriptionId>;
+  using SubscriptionsMap = base::IDMap<std::unique_ptr<Subscription>>;
   using SubscriptionsStatusMap =
       base::flat_map<SubscriptionsMap::KeyType, blink::mojom::PermissionStatus>;
 
@@ -99,13 +98,7 @@ class CONTENT_EXPORT PermissionControllerImpl : public PermissionController {
       const base::Optional<url::Origin>& origin);
 
   DevToolsPermissionOverrides devtools_permission_overrides_;
-
-  // Note that SubscriptionId is distinct from
-  // PermissionControllerDelegate::SubscriptionId, and the concrete ID values
-  // may be different as well.
   SubscriptionsMap subscriptions_;
-  SubscriptionId::Generator subscription_id_generator_;
-
   BrowserContext* browser_context_;
 
   DISALLOW_COPY_AND_ASSIGN(PermissionControllerImpl);
diff --git a/chromium/content/browser/permissions/permission_service_context.cc b/chromium/content/browser/permissions/permission_service_context.cc
index cb409a27cd0..c3ab81294ed 100644
--- a/src/3rdparty/chromium/content/browser/permissions/permission_service_context.cc
+++ b/src/3rdparty/chromium/content/browser/permissions/permission_service_context.cc
@@ -32,7 +32,7 @@ class PermissionServiceContext::PermissionSubscription {
   PermissionSubscription& operator=(const PermissionSubscription&) = delete;
 
   ~PermissionSubscription() {
-    DCHECK(id_);
+    DCHECK_NE(id_, 0);
     BrowserContext* browser_context = context_->GetBrowserContext();
     if (browser_context) {
       PermissionControllerImpl::FromBrowserContext(browser_context)
@@ -41,7 +41,7 @@ class PermissionServiceContext::PermissionSubscription {
   }
 
   void OnConnectionError() {
-    DCHECK(id_);
+    DCHECK_NE(id_, 0);
     context_->ObserverHadConnectionError(id_);
   }
 
@@ -49,12 +49,12 @@ class PermissionServiceContext::PermissionSubscription {
     observer_->OnPermissionStatusChange(status);
   }
 
-  void set_id(PermissionController::SubscriptionId id) { id_ = id; }
+  void set_id(int id) { id_ = id; }
 
  private:
   PermissionServiceContext* const context_;
   mojo::Remote<blink::mojom::PermissionObserver> observer_;
-  PermissionController::SubscriptionId id_;
+  int id_ = 0;
 };
 
 PermissionServiceContext::PermissionServiceContext(
@@ -108,7 +108,7 @@ void PermissionServiceContext::CreateSubscription(
   }
 
   GURL requesting_origin(origin.Serialize());
-  auto subscription_id =
+  int subscription_id =
       PermissionControllerImpl::FromBrowserContext(browser_context)
           ->SubscribePermissionStatusChange(
               permission_type, render_frame_host_, requesting_origin,
@@ -119,8 +119,7 @@ void PermissionServiceContext::CreateSubscription(
   subscriptions_[subscription_id] = std::move(subscription);
 }
 
-void PermissionServiceContext::ObserverHadConnectionError(
-    PermissionController::SubscriptionId subscription_id) {
+void PermissionServiceContext::ObserverHadConnectionError(int subscription_id) {
   size_t erased = subscriptions_.erase(subscription_id);
   DCHECK_EQ(1u, erased);
 }
diff --git a/chromium/content/browser/permissions/permission_service_context.h b/chromium/content/browser/permissions/permission_service_context.h
index 0680c70c8ee..4f93be504fd 100644
--- a/src/3rdparty/chromium/content/browser/permissions/permission_service_context.h
+++ b/src/3rdparty/chromium/content/browser/permissions/permission_service_context.h
@@ -9,7 +9,6 @@
 #include <unordered_map>
 
 #include "content/common/content_export.h"
-#include "content/public/browser/permission_controller.h"
 #include "content/public/browser/permission_type.h"
 #include "content/public/browser/web_contents_observer.h"
 #include "mojo/public/cpp/bindings/pending_receiver.h"
@@ -53,8 +52,7 @@ class CONTENT_EXPORT PermissionServiceContext : public WebContentsObserver {
       mojo::PendingRemote<blink::mojom::PermissionObserver> observer);
 
   // Called when the connection to a PermissionObserver has an error.
-  void ObserverHadConnectionError(
-      PermissionController::SubscriptionId subscription_id);
+  void ObserverHadConnectionError(int subscription_id);
 
   // May return nullptr during teardown, or when showing an interstitial.
   BrowserContext* GetBrowserContext() const;
@@ -80,8 +78,7 @@ class CONTENT_EXPORT PermissionServiceContext : public WebContentsObserver {
   RenderFrameHost* const render_frame_host_;
   RenderProcessHost* const render_process_host_;
   mojo::UniqueReceiverSet<blink::mojom::PermissionService> services_;
-  std::unordered_map<PermissionController::SubscriptionId,
-                     std::unique_ptr<PermissionSubscription>>
+  std::unordered_map<int, std::unique_ptr<PermissionSubscription>>
       subscriptions_;
 };
 
diff --git a/chromium/content/browser/renderer_host/media/media_stream_manager.cc b/chromium/content/browser/renderer_host/media/media_stream_manager.cc
index c627d893110..884eb393ba0 100644
--- a/src/3rdparty/chromium/content/browser/renderer_host/media/media_stream_manager.cc
+++ b/src/3rdparty/chromium/content/browser/renderer_host/media/media_stream_manager.cc
@@ -668,9 +668,9 @@ class MediaStreamManager::DeviceRequest {
 
   std::string tab_capture_device_id;
 
-  PermissionController::SubscriptionId audio_subscription_id;
+  int audio_subscription_id = PermissionControllerImpl::kNoPendingOperation;
 
-  PermissionController::SubscriptionId video_subscription_id;
+  int video_subscription_id = PermissionControllerImpl::kNoPendingOperation;
 
  private:
   std::vector<MediaRequestState> state_;
@@ -2686,8 +2686,8 @@ void MediaStreamManager::SubscribeToPermissionControllerOnUIThread(
   if (!controller)
     return;
 
-  PermissionController::SubscriptionId audio_subscription_id;
-  PermissionController::SubscriptionId video_subscription_id;
+  int audio_subscription_id = PermissionControllerImpl::kNoPendingOperation;
+  int video_subscription_id = PermissionControllerImpl::kNoPendingOperation;
 
   if (is_audio_request) {
     // It is safe to bind base::Unretained(this) because MediaStreamManager is
@@ -2729,8 +2729,8 @@ void MediaStreamManager::SetPermissionSubscriptionIDs(
     const std::string& label,
     int requesting_process_id,
     int requesting_frame_id,
-    PermissionController::SubscriptionId audio_subscription_id,
-    PermissionController::SubscriptionId video_subscription_id) {
+    int audio_subscription_id,
+    int video_subscription_id) {
   DCHECK_CURRENTLY_ON(BrowserThread::IO);
 
   DeviceRequest* const request = FindRequest(label);
@@ -2757,8 +2757,8 @@ void MediaStreamManager::SetPermissionSubscriptionIDs(
 void MediaStreamManager::UnsubscribeFromPermissionControllerOnUIThread(
     int requesting_process_id,
     int requesting_frame_id,
-    PermissionController::SubscriptionId audio_subscription_id,
-    PermissionController::SubscriptionId video_subscription_id) {
+    int audio_subscription_id,
+    int video_subscription_id) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
   PermissionControllerImpl* controller =
diff --git a/chromium/content/browser/renderer_host/media/media_stream_manager.h b/chromium/content/browser/renderer_host/media/media_stream_manager.h
index 7898abfbf99..045e5f5c00d 100644
--- a/src/3rdparty/chromium/content/browser/renderer_host/media/media_stream_manager.h
+++ b/src/3rdparty/chromium/content/browser/renderer_host/media/media_stream_manager.h
@@ -50,7 +50,6 @@
 #include "content/public/browser/desktop_media_id.h"
 #include "content/public/browser/media_request_state.h"
 #include "content/public/browser/media_stream_request.h"
-#include "content/public/browser/permission_controller.h"
 #include "media/base/video_facing.h"
 #include "third_party/blink/public/common/mediastream/media_devices.h"
 #include "third_party/blink/public/common/mediastream/media_stream_controls.h"
@@ -558,20 +557,19 @@ class CONTENT_EXPORT MediaStreamManager
 
   // Store the subscription ids on a DeviceRequest in order to allow
   // unsubscribing when the request is deleted.
-  void SetPermissionSubscriptionIDs(
-      const std::string& label,
-      int requesting_process_id,
-      int requesting_frame_id,
-      PermissionController::SubscriptionId audio_subscription_id,
-      PermissionController::SubscriptionId video_subscription_id);
+  void SetPermissionSubscriptionIDs(const std::string& label,
+                                    int requesting_process_id,
+                                    int requesting_frame_id,
+                                    int audio_subscription_id,
+                                    int video_subscription_id);
 
   // Unsubscribe from following permission updates for the two specified
   // subscription IDs. Called when a request is deleted.
   static void UnsubscribeFromPermissionControllerOnUIThread(
       int requesting_process_id,
       int requesting_frame_id,
-      PermissionController::SubscriptionId audio_subscription_id,
-      PermissionController::SubscriptionId video_subscription_id);
+      int audio_subscription_id,
+      int video_subscription_id);
 
   // Callback that the PermissionController calls when a permission is updated.
   void PermissionChangedCallback(int requesting_process_id,
diff --git a/chromium/content/public/browser/permission_controller.h b/chromium/content/public/browser/permission_controller.h
index 77fe96a1c33..b9b42def49b 100644
--- a/src/3rdparty/chromium/content/public/browser/permission_controller.h
+++ b/src/3rdparty/chromium/content/public/browser/permission_controller.h
@@ -6,7 +6,6 @@
 #define CONTENT_PUBLIC_BROWSER_PERMISSION_CONTROLLER_H_
 
 #include "base/supports_user_data.h"
-#include "base/util/type_safety/id_type.h"
 #include "content/common/content_export.h"
 #include "content/public/browser/permission_type.h"
 #include "third_party/blink/public/mojom/permissions/permission_status.mojom.h"
@@ -21,13 +20,8 @@ class RenderFrameHost;
 class CONTENT_EXPORT PermissionController
     : public base::SupportsUserData::Data {
  public:
-  // Identifier for an active subscription. This is intentionally a distinct
-  // type from PermissionControllerDelegate::SubscriptionId as the concrete
-  // identifier values may be different.
-  using SubscriptionId = util::IdType64<PermissionController>;
-
-  // Constant returned when requesting a permission if cancelling at a later
-  // stage would have no effect.
+  // Constant retured when registering and subscribing if
+  // cancelling/unsubscribing at a later stage would have no effect.
   static const int kNoPendingOperation = -1;
 
   ~PermissionController() override {}
@@ -54,17 +48,4 @@ class CONTENT_EXPORT PermissionController
 
 }  // namespace content
 
-namespace std {
-
-template <>
-struct hash<content::PermissionController::SubscriptionId> {
-  std::size_t operator()(
-      const content::PermissionController::SubscriptionId& v) const {
-    content::PermissionController::SubscriptionId::Hasher hasher;
-    return hasher(v);
-  }
-};
-
-}  // namespace std
-
 #endif  // CONTENT_PUBLIC_BROWSER_PERMISSION_CONTROLLER_H_
diff --git a/chromium/content/public/browser/permission_controller_delegate.h b/chromium/content/public/browser/permission_controller_delegate.h
index 82a1d4f0efd..e47de2a278e 100644
--- a/src/3rdparty/chromium/content/public/browser/permission_controller_delegate.h
+++ b/src/3rdparty/chromium/content/public/browser/permission_controller_delegate.h
@@ -5,7 +5,6 @@
 #ifndef CONTENT_PUBLIC_BROWSER_PERMISSION_CONTROLLER_DELEGATE_H_
 #define CONTENT_PUBLIC_BROWSER_PERMISSION_CONTROLLER_DELEGATE_H_
 
-#include "base/util/type_safety/id_type.h"
 #include "content/common/content_export.h"
 #include "content/public/browser/devtools_permission_overrides.h"
 #include "third_party/blink/public/mojom/permissions/permission_status.mojom.h"
@@ -19,10 +18,6 @@ class RenderFrameHost;
 class CONTENT_EXPORT PermissionControllerDelegate {
  public:
   using PermissionOverrides = DevToolsPermissionOverrides::PermissionOverrides;
-
-  // Identifier for an active subscription.
-  using SubscriptionId = util::IdType64<PermissionControllerDelegate>;
-
   virtual ~PermissionControllerDelegate() = default;
 
   // Requests a permission on behalf of a frame identified by
@@ -85,21 +80,21 @@ class CONTENT_EXPORT PermissionControllerDelegate {
 
   // Runs the given |callback| whenever the |permission| associated with the
   // given RenderFrameHost changes. A nullptr should be passed if the request
-  // is from a worker. Returns the ID to be used to unsubscribe, which can be
-  // `is_null()` if the subscribe was not successful.
-  virtual SubscriptionId SubscribePermissionStatusChange(
+  // is from a worker. Returns the subscription_id to be used to unsubscribe.
+  // Can be kNoPendingOperation if the subscribe was not successful.
+  virtual int SubscribePermissionStatusChange(
       content::PermissionType permission,
       content::RenderFrameHost* render_frame_host,
       const GURL& requesting_origin,
       base::RepeatingCallback<void(blink::mojom::PermissionStatus)>
           callback) = 0;
 
-  // Unregisters from permission status change notifications. The
-  // |subscription_id| must match the value returned by the
-  // SubscribePermissionStatusChange call. Unsubscribing an already
-  // unsubscribed |subscription_id| or an `is_null()` ID is a no-op.
-  virtual void UnsubscribePermissionStatusChange(
-      SubscriptionId subscription_id) = 0;
+  // Unregisters from permission status change notifications.
+  // The |subscription_id| must match the value returned by the
+  // SubscribePermissionStatusChange call. Unsubscribing
+  // an already unsubscribed |subscription_id| or providing the
+  // |subscription_id| kNoPendingOperation is a no-op.
+  virtual void UnsubscribePermissionStatusChange(int subscription_id) = 0;
 
   // Manually overrides default permission settings of delegate, if overrides
   // are tracked by the delegate. This method should only be called by the
@@ -121,17 +116,4 @@ class CONTENT_EXPORT PermissionControllerDelegate {
 
 }  // namespace content
 
-namespace std {
-
-template <>
-struct hash<content::PermissionControllerDelegate::SubscriptionId> {
-  std::size_t operator()(
-      const content::PermissionControllerDelegate::SubscriptionId& v) const {
-    content::PermissionControllerDelegate::SubscriptionId::Hasher hasher;
-    return hasher(v);
-  }
-};
-
-}  // namespace std
-
 #endif  // CONTENT_PUBLIC_BROWSER_PERMISSION_CONTROLLER_DELEGATE_H_
diff --git a/chromium/fuchsia/engine/browser/web_engine_permission_delegate.cc b/chromium/fuchsia/engine/browser/web_engine_permission_delegate.cc
index c18b8be7cdf..98592f05b6d 100644
--- a/src/3rdparty/chromium/fuchsia/engine/browser/web_engine_permission_delegate.cc
+++ b/src/3rdparty/chromium/fuchsia/engine/browser/web_engine_permission_delegate.cc
@@ -83,21 +83,20 @@ WebEnginePermissionDelegate::GetPermissionStatusForFrame(
       permission, url::Origin::Create(requesting_origin));
 }
 
-WebEnginePermissionDelegate::SubscriptionId
-WebEnginePermissionDelegate::SubscribePermissionStatusChange(
+int WebEnginePermissionDelegate::SubscribePermissionStatusChange(
     content::PermissionType permission,
     content::RenderFrameHost* render_frame_host,
     const GURL& requesting_origin,
     base::RepeatingCallback<void(blink::mojom::PermissionStatus)> callback) {
   // TODO(crbug.com/1063094): Implement permission status subscription. It's
   // used in blink to emit PermissionStatus.onchange notifications.
-  NOTIMPLEMENTED_LOG_ONCE() << ": " << static_cast<int>(permission);
-  return SubscriptionId();
+  NOTIMPLEMENTED() << ": " << static_cast<int>(permission);
+  return content::PermissionController::kNoPendingOperation;
 }
 
 void WebEnginePermissionDelegate::UnsubscribePermissionStatusChange(
-    SubscriptionId subscription_id) {
+    int subscription_id) {
   // TODO(crbug.com/1063094): Implement permission status subscription. It's
   // used in blink to emit PermissionStatus.onchange notifications.
-  NOTIMPLEMENTED_LOG_ONCE();
+  NOTREACHED();
 }
diff --git a/chromium/fuchsia/engine/browser/web_engine_permission_delegate.h b/chromium/fuchsia/engine/browser/web_engine_permission_delegate.h
index c39989b471c..036207b75d3 100644
--- a/src/3rdparty/chromium/fuchsia/engine/browser/web_engine_permission_delegate.h
+++ b/src/3rdparty/chromium/fuchsia/engine/browser/web_engine_permission_delegate.h
@@ -45,14 +45,13 @@ class WebEnginePermissionDelegate
       content::PermissionType permission,
       content::RenderFrameHost* render_frame_host,
       const GURL& requesting_origin) override;
-  SubscriptionId SubscribePermissionStatusChange(
+  int SubscribePermissionStatusChange(
       content::PermissionType permission,
       content::RenderFrameHost* render_frame_host,
       const GURL& requesting_origin,
       base::RepeatingCallback<void(blink::mojom::PermissionStatus)> callback)
       override;
-  void UnsubscribePermissionStatusChange(
-      SubscriptionId subscription_id) override;
+  void UnsubscribePermissionStatusChange(int subscription_id) override;
 };
 
 #endif  // FUCHSIA_ENGINE_BROWSER_WEB_ENGINE_PERMISSION_DELEGATE_H_
diff --git a/chromium/headless/lib/browser/headless_permission_manager.cc b/chromium/headless/lib/browser/headless_permission_manager.cc
index 359ecdc4b72..5d4d609fc0c 100644
--- a/src/3rdparty/chromium/headless/lib/browser/headless_permission_manager.cc
+++ b/src/3rdparty/chromium/headless/lib/browser/headless_permission_manager.cc
@@ -71,16 +71,15 @@ HeadlessPermissionManager::GetPermissionStatusForFrame(
   return blink::mojom::PermissionStatus::ASK;
 }
 
-HeadlessPermissionManager::SubscriptionId
-HeadlessPermissionManager::SubscribePermissionStatusChange(
+int HeadlessPermissionManager::SubscribePermissionStatusChange(
     content::PermissionType permission,
     content::RenderFrameHost* render_frame_host,
     const GURL& requesting_origin,
     base::RepeatingCallback<void(blink::mojom::PermissionStatus)> callback) {
-  return SubscriptionId();
+  return content::PermissionController::kNoPendingOperation;
 }
 
 void HeadlessPermissionManager::UnsubscribePermissionStatusChange(
-    SubscriptionId subscription_id) {}
+    int subscription_id) {}
 
 }  // namespace headless
diff --git a/chromium/headless/lib/browser/headless_permission_manager.h b/chromium/headless/lib/browser/headless_permission_manager.h
index ac30670cb38..4b83309ab3a 100644
--- a/src/3rdparty/chromium/headless/lib/browser/headless_permission_manager.h
+++ b/src/3rdparty/chromium/headless/lib/browser/headless_permission_manager.h
@@ -46,14 +46,13 @@ class HeadlessPermissionManager : public content::PermissionControllerDelegate {
       content::PermissionType permission,
       content::RenderFrameHost* render_frame_host,
       const GURL& requesting_origin) override;
-  SubscriptionId SubscribePermissionStatusChange(
+  int SubscribePermissionStatusChange(
       content::PermissionType permission,
       content::RenderFrameHost* render_frame_host,
       const GURL& requesting_origin,
       base::RepeatingCallback<void(blink::mojom::PermissionStatus)> callback)
       override;
-  void UnsubscribePermissionStatusChange(
-      SubscriptionId subscription_id) override;
+  void UnsubscribePermissionStatusChange(int subscription_id) override;
 
  private:
   content::BrowserContext* browser_context_;
-- 
2.31.1

